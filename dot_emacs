(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
(setenv "PATH" (concat (getenv "PATH") ":/Users/radchmie/.cargo/bin"))
(setq exec-path (append exec-path '("/usr/local/bin")))
(setq exec-path (append exec-path '("/Users/radchmie/.cargo/bin")))
(setq python-shell-interpreter "python3")
(prefer-coding-system 'utf-8-unix)
(global-set-key (kbd "M-/") 'hippie-expand)
(global-set-key (kbd "C-x C-b") 'helm-buffers-list)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key "\C-xf" 'helm-find-files)
;
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))
(setq mac-option-key-is-meta nil)
(setq mac-command-key-is-meta t)
(setq mac-command-modifier 'meta)
(setq mac-option-modifier nil)
(cua-mode t)
(setq inhibit-startup-screen t)
(show-paren-mode t)
(tool-bar-mode 0)
(setq pop-up-windows nil)
(set-face-font 'default "-*-Menlo-normal-normal-normal-*-18-*-*-*-m-0-iso10646-1")

;;syntax
(require 'generic-x)

;; markdown
;(add-to-list 'load-path "/Users/radchmie/.emacs.d/markdown-mode")
;(add-to-list 'load-path "/Users/radchmie/.emacs.d/docker-mode")

;; el-get
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")

(unless (require 'el-get nil 'noerror)
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/"))
  (package-refresh-contents)
  (package-initialize)
  (package-install 'el-get)
  (require 'el-get))

(add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")
(el-get 'sync)
;; el-get

;; jedi python
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)

(global-set-key (kbd "<C-tab>") 'jedi:complete)
;; jedi python

;(require 'saveplace)
;(setq-default save-place t)

;(require 'recentf)
;(setq recentf-auto-cleanup 'never)
;(recentf-mode 1)

;(desktop-save-mode 1)

;
;(require 'helm-config)
;(helm-mode 1)
;
;(setq tramp-default-method "ssh")
;
;(require 'undo-tree)
;(global-undo-tree-mode)


;(require 'mu4e)
;(setq mu4e-maildir "~/runbox")
;(setq mu4e-mu-binary "/usr/local/bin/mu")
;(setq mu4e-get-mail-command "/usr/local/bin/offlineimap")

;; shortcuts
;(setq mu4e-maildir-shortcuts
;    '( ("/INBOX"               . ?i)
;       ("/INBOX.me"            . ?m)))

;; something about ourselves
;(setq
;   user-mail-address "radchmie@cisco.com"
;   user-full-name  "Rado Chmiel"
;   mu4e-compose-signature
;    (concat
;      "Best regards,\n"
;      "Rado Chmiel\n"))
;
;; show images
;(setq mu4e-show-images t)

;; use imagemagick, if available
;(when (fboundp 'imagemagick-register-types)
;  (imagemagick-register-types))

;; convert html emails properly
;; Possible options:
;;   - html2text -utf8 -width 72
;;   - textutil -stdin -format html -convert txt -stdout
;;   - html2markdown | grep -v '&nbsp_place_holder;' (Requires html2text pypi)
;;   - w3m -dump -cols 80 -T text/html
;;   - view in browser (provided below)
;(setq mu4e-html2text-command "w3m -dump -cols 80 -T text/html")

;; spell check
;(add-hook 'mu4e-compose-mode-hook
;        (defun my-do-compose-stuff ()
;           "My settings for message composition."
;           (set-fill-column 72)
;           (flyspell-mode)))

;; add option to view html message in a browser
;; `aV` in view to activate
;(add-to-list 'mu4e-view-actions
;  '("ViewInBrowser" . mu4e-action-view-in-browser) t)

;; fetch mail every 10 mins
;(setq mu4e-update-interval 600)

;;rust
(add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
(add-hook 'rust-mode-hook
          (lambda ()
            (local-set-key (kbd "C-c <tab>") #'rust-format-buffer)))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes '(wombat))
 '(package-selected-packages '(helm-ebdb el-get)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

